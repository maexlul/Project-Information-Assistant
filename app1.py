# -*- coding: utf-8 -*-
"""streamlit_langchain

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15ho15qWNEnrKCkPHnW7rpGZHJlwlAzsl
"""

import streamlit as st
import pandas as pd
from langchain.schema import Document
from langchain.vectorstores import FAISS
from langchain.embeddings import HuggingFaceEmbeddings


@st.cache_data
def load_data():
    df = pd.read_csv("techm_projects_mock.csv")
    df['contact'] = df['client_name'].str.lower().str.replace(" ", "") + "@contact.com"
    return df

df = load_data()


@st.cache_resource
def build_vectorstore(df):
    documents = []
    for _, row in df.iterrows():
        content = f"""
        Project ID: {row['project_id']}
        Project Name: {row['project_name']}
        Status: {row['status']}
        Description: {row['description']}
        Contact: {row['contact']}
        """
        documents.append(Document(page_content=content.strip()))

    embeddings = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")
    return FAISS.from_documents(documents, embeddings)

vectorstore = build_vectorstore(df)
retriever = vectorstore.as_retriever(search_kwargs={"k": 3})


st.set_page_config(page_title="Project Info Assistant", layout="wide")
st.title("üìä Project Info Assistant")
st.write("Search projects by ID or name. Use filters for Status or Client.")

if "search_history" not in st.session_state:
    st.session_state.search_history = []

with st.sidebar:
    st.subheader("üîç Filters")
    status_filter = st.selectbox("Status", ["All"] + sorted(df['status'].dropna().unique()))
    client_filter = st.selectbox("Client Name", ["All"] + sorted(df['client_name'].dropna().unique()))

query = st.text_input("Enter Project Name or ID:")

if query:
    st.session_state.search_history.append(query)

    filtered_df = df.copy()

    if status_filter != "All":
        filtered_df = filtered_df[filtered_df['status'] == status_filter]
    if client_filter != "All":
        filtered_df = filtered_df[filtered_df['client_name'] == client_filter]

    if query.isdigit():
        pid = int(query)
        row_df = filtered_df[filtered_df['project_id'] == pid]
        if not row_df.empty:
            row = row_df.iloc[0]
            st.success("‚úÖ Exact Match Found")
            st.markdown(f"""
            **Project ID**: {row['project_id']}
            **Project Name**: {row['project_name']}
            **Status**: {row['status']}
            **Description**: {row['description']}
            **Contact**: {row['contact']}
            """)
        else:
            st.warning("‚ùå No project found with that ID in the current filter view.")
    else:
        results = retriever.invoke(query)
        st.info("üîé Top Semantic Matches")
        for doc in results:
            st.markdown("---")
            st.markdown(doc.page_content)

# Show history
with st.expander("üïò Search History"):
    if st.session_state.search_history:
        for i, item in enumerate(reversed(st.session_state.search_history), 1):
            st.write(f"{i}. {item}")
    else:
        st.write("No searches yet.")